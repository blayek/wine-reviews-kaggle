library(shiny)
library(RColorBrewer)
library(maptools)
library(ggplot2)
library(ggjoy)
library(caTools)
library(party)
library(e1071)
library(tidyverse)
data = read.csv('winemag-data_first150k.csv')
#Sample Size
set.seed(101)
sample = sample.split(data$country, SplitRatio = .05)
data.train = subset(data, sample == TRUE)
data.test  = subset(data, sample == FALSE)
fit = glm(points ~ country, data = data.train)
fit2 = glm(points ~ variety, data = data.train)
summary(fit)
summary(fit2)
###########
topN = function(df,VAR,nCutoff){
tmp = df %>%
group_by_(VAR) %>%
summarise(n = n()) %>%
arrange(desc(n))
colnames(tmp) = c('N','n')
tmpN = tmp$N[1:nCutoff]
tmpN = factor(tmpN,levels=tmpN)
return(tmpN)
}
varieties = topN(data,'variety',50)
countries = topN(data,'country',50)
df = data %>%
na.omit() %>%
mutate(Quality = if_else(points>=90,'Good','Bad')) %>%
select(Quality,country,designation,price,province,region_1,variety,winery,points)
df$priceBucket = round(df$price,-1)
df$Quality = factor(df$Quality,levels=c('Good','Bad'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .30)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
table(df$Quality)/nrow(df)
table(df.train$Quality)/nrow(df.train)
table(df.test$Quality)/nrow(df.test)
library(MASS)
model = svm(Quality ~ priceBucket,data=df.train)
print(model)
summary(model)
plot(model,df.train)
plot(model,df.train %>% select(Quality,priceBucket))
plot(model, data = df.train %>% select(Quality,priceBucket))
plot(model, data = df.train)
print(model)
summary(model)
varieties = topN(data,'variety',50)
countries = topN(data,'country',50)
df = data %>%
na.omit() %>%
mutate(Quality = if_else(points>=90,'Good','Bad')) %>%
select(Quality,country,designation,price,province,region_1,variety,winery,points)
df$priceBucket = round(df$price,-1)
df$Quality = factor(df$Quality,levels=c('Good','Bad'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
table(df$Quality)/nrow(df)
table(df.train$Quality)/nrow(df.train)
table(df.test$Quality)/nrow(df.test)
head(df)
model = svm(Quality ~ .-points ,data=df.train)
print(model)
head(df)
plot(model, data = df.train,price~country)
plot(model, data = df.train,price~priceBucket)
plot(model, data = df.train)
table(predict(model),df.train$Quality)
model.nb = naiveBayes(Quality ~ .-points ,data=df.train)
table(predict(model.nb),df.train$Quality)
model.nb = naiveBayes(Quality ~ .-points ,data=df.train)
table(predict(model.nb),df.train$Quality)
print(model.nb)
summary(model.nb)
table(predict(model.nb), newdata = df.train)
preds = predict(model.nb,df.train)
table(preds, df.train$Quality)
plot(model.nb)
df = data %>%
na.omit() %>%
select(country,designation,price,province,region_1,variety,winery,points)
df$priceBucket = round(df$price,-1)
df = data %>%
na.omit() %>%
select(country,designation,price,province,region_1,variety,winery,points)
df = data %>%
na.omit() %>%
select(country,designation,price,province,region_1,variety,winery,points)
df = data %>%
na.omit()
head(df)
df = data %>%
na.omit() %>%
select(country,designation,price,province,region_1,variety,winery,points)
df = data %>% select(country,designation,price,province,region_1,variety,winery,points)
library(tidyverse)
df = data %>%
na.omit() %>%
select(country,designation,price,province,region_1,variety,winery,points)
df = data %>%
na.omit() %>%
dplyr::select(country,designation,price,province,region_1,variety,winery,points)
df = data %>%
na.omit() %>%
dplyr::select(country,designation,price,province,region_1,variety,winery,points)
head(dplyr)
head(df)
df$priceBucket = round(df$price,-1)
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
head(preds)
model.nb
summary(model.nb)
df$priceBucket = round(df$price,-2)
head(df)
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
head(df)
df$priceBucket = round(df$price,-1.5)
head(df)
unique(df$priceBucket)
df$priceBucket = round(df$price,-1)
unique(df$priceBucket)
df$priceBucket = factor(df$priceBucket,unique(df$priceBucket))
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
plot(model.nb)
plot(model.nb$`240`,model.nb$preds)
table(preds, df.train$priceBucket)
mean(preds==df.train$priceBucket)
preds2 = predict(model.nb,df.test)
table(preds2,df.test$priceBucket)
mean(preds2==df.test$priceBucket)
mround <- function(x,base){
base*round(x/base)
}
df$priceBucket = mround(df$price,5)
df = data %>%
na.omit() %>%
dplyr::select(country,designation,price,province,region_1,variety,winery,points)
df$priceBucket = mround(df$price,5)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
#df$Quality = factor(df$Quality,levels=c('Good','Bad'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
mean(preds==df.train$priceBucket)
df = data %>%
na.omit() %>%
mutate(priceBucket = mround(price,5)) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,5)) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points)
head(df)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
head(df)
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,5)) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points,priceBucket)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
mean(preds==df.train$priceBucket)
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,10)) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points,priceBucket)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
#df$priceBucket = mround(df$price,5)
#df$Quality = factor(df$Quality,levels=c('Good','Bad'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.nb = naiveBayes(priceBucket ~ . ,data=df.train)
summary(model.nb)
preds = predict(model.nb,df.train)
table(preds, df.train$priceBucket)
mean(preds==df.train$priceBucket)
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,10),Quality=ifelse(points>=90,'Great','Okay')) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points,priceBucket)
df$Quality = factor(df$Quality,levels=c('Great','Okay'))
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,10),Quality=ifelse(points>=90,'Great','Okay')) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points,priceBucket)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
df$Quality = factor(df$Quality,levels=c('Great','Okay'))
head(df)
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,10),Quality=ifelse(points>=90,'Great','Okay')) %>%
dplyr::select(country,designation,province,region_1,variety,winery,points,priceBucket,Quality)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
df$Quality = factor(df$Quality,levels=c('Great','Okay'))
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,10),Quality=ifelse(points>=90,'Great','Okay')) %>%
dplyr::select(country,designation,province,region_1,variety,winery,priceBucket,Quality)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
df$Quality = factor(df$Quality,levels=c('Great','Okay'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
library(rpart)
head(df)
df = data %>%
na.omit() %>%
dplyr::mutate(priceBucket = mround(price,5),Quality=ifelse(points>=90,'Great','Okay')) %>%
dplyr::select(country,designation,province,region_1,variety,winery,priceBucket,Quality)
df$priceBucket = factor(df$priceBucket,levels=unique(df$priceBucket))
df$Quality = factor(df$Quality,levels=c('Great','Okay'))
set.seed(101)
sample = sample.split(df$country, SplitRatio = .05)
df.train = subset(df, sample == TRUE)
df.test  = subset(df, sample == FALSE)
model.tree = rpart(Quality ~ ., method = 'class')
model.tree = rpart(Quality ~ ., method = 'class', data = df.train)
print(model.tree)
plot(model.tree)
printcp(model.tree)
plot(model.tree)
plotcp(model.tree)
plot(model.tree)
text(model.tree)
